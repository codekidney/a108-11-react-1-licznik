{"version":3,"sources":["Header.js","Display.js","ButtonsPanel.js","Step.js","Counter.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","react_default","a","createElement","className","title","Display","currentValue","ButtonsPanel","onClick","onAdd","stepValue","onReInit","onReset","Step","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","updateStep","e","preventDefault","setStep","_inputStep","value","_this2","type","ref","data","onChange","Component","Counter","updateStepValue","newStep","currentStepValue","setState","Number","updateCounter","newCounterValue","state","counterValue","reinitCounter","initValue","resetCounter","src_Display","src_ButtonsPanel","src_Step","App","src_Header","src_Counter","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a98531c9.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Header = (props) => {\r\n    return (\r\n        <div className=\"Header\"><h1>{props.title}</h1></div>\r\n    )\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\n\r\nconst Display = (props) => {\r\n    return (\r\n        <div className=\"Display mb-3\">\r\n            <h3>Licznik: <strong>{props.currentValue}</strong></h3>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Display;","import React from 'react';\r\n\r\nconst ButtonsPanel = (props) => {\r\n    return (\r\n        <div className=\"ButtonsPanel mb-3\">\r\n            <button onClick={props.onAdd} className=\"btn btn-primary mr-2\">Add {props.stepValue}</button> \r\n            <button onClick={props.onReInit} className=\"btn btn-primary mr-2\">ReInit</button> \r\n            <button onClick={props.onReset} className=\"btn btn-primary\">Reset</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ButtonsPanel;","import React, {Component} from 'react';\r\n\r\nclass Step extends Component {\r\n    constructor(props){\r\n        super(props)\r\n        this._inputStep = '';\r\n    }\r\n    updateStep = (e) => {\r\n        e.preventDefault();\r\n        this.props.setStep(this._inputStep.value);\r\n    }\r\n    render(){\r\n        return (\r\n        <div className=\"Step form-group row\">\r\n            <label className=\"ol-form-label col-sm-6 col-md-6\">Krok</label>\r\n            <input className=\"form-control col-sm-2 col-md-1\" type=\"number\" \r\n                ref={(data) => { this._inputStep = data} } \r\n                onChange={this.updateStep}\r\n                value={this.props.stepValue} />\r\n        </div> \r\n        )\r\n    }\r\n}\r\n\r\nexport default Step;","import React, {Component} from 'react';\r\nimport Display from './Display';\r\nimport ButtonsPanel from './ButtonsPanel';\r\nimport Step from './Step';\r\n\r\nclass Counter extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            stepValue: 5,\r\n            counterValue: Number(props.initValue),\r\n            initValue: Number(props.initValue),\r\n        }\r\n    }\r\n\r\n    updateStepValue = (newStep) => {\r\n        // Step value ( min. value 1 )\r\n        const currentStepValue = (newStep > 0) ? newStep : 1;\r\n        this.setState({\r\n            stepValue: Number(currentStepValue)\r\n        })\r\n    }\r\n    \r\n    updateCounter = () => {\r\n        const newCounterValue = this.state.counterValue + this.state.stepValue;\r\n        this.setState({\r\n            counterValue: newCounterValue\r\n        })\r\n    }\r\n    \r\n    reinitCounter = () => {\r\n        const initValue = this.state.initValue;\r\n        this.setState({\r\n            counterValue: initValue\r\n        })\r\n    }\r\n    \r\n    resetCounter = () => {\r\n        this.setState({\r\n            counterValue: 0\r\n        })\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <div className=\"Counter\">\r\n                <Display currentValue={this.state.counterValue}/>\r\n                <ButtonsPanel \r\n                    onReInit={this.reinitCounter} \r\n                    onReset={this.resetCounter}\r\n                    onAdd={this.updateCounter} \r\n                    stepValue={this.state.stepValue}/>\r\n                <Step \r\n                    setStep={this.updateStepValue} \r\n                    stepValue={this.state.stepValue}/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Counter;","import React from 'react';\nimport './App.css';\nimport Header from './Header';\nimport Counter from './Counter';\n\nfunction App() {\n  return (\n    <div className=\"App container\">\n      <Header title=\"Aplikacja licznika w ReactJS\" />\n      <Counter initValue=\"300\"/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}